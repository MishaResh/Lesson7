# 3. Реализовать программу работы с органическими клетками, состоящими из ячеек. Необходимо создать класс
# Клетка. В его конструкторе инициализировать параметр, соответствующий количеству ячеек клетки (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов: сложение (add()), вычитание
# (sub()), умножение (mul()), деление (truediv()). Данные методы должны применяться только к клеткам и выполнять
# увеличение, уменьшение, умножение и целочисленное (с округлением до целого) деление клеток, соответственно.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух
# клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток
# больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение количества ячеек
# этих двух клеток.
# Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества
# ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду. Данный
# метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному
# аргументу. Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод make_order() вернет
# строку: *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод make_order() вернет
# строку: *****\n*****\n*****.

class Cell:
    def __init__(self, n):
        self.n = n if n >= 1 else print('В клетке должно быть больше ячеек')

    def __add__(self, other):
        return self.n + other.n

    def __sub__(self, other):
        return self.n - other.n if (self.n - other.n) > 0 else print('Вычитание невозможно')

    def __mul__(self, other):
        return self.n * other.n

    def __truediv__(self, other):
        return self.n // other.n

    def __str__(self):
        return str(self.n)

    def make_order(salf, cage):
        str_order = ''
        order = ''
        order_end = ''
        i_sp = salf.n // cage-1
        j_sp = salf.n-i_sp*cage
        for j in range(cage):
            order = order + '*'
        for i in range(i_sp):
            str_order = str_order + order + '\\n'
        for j in range(j_sp):
            order_end = order_end + '*'
        return str_order + order_end


a = Cell(15)
b = Cell(6)
print(a+b)
print(a-b)
print(a*b)
print(a/b)
print(a.make_order(5))
print(b.make_order(2))
